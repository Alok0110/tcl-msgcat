#!/usr/bin/env ruby

require 'tcl/msgcat'

case ARGV[0]
when "parse", "p"
  file = ARGV[1]
  puts Tcl::Msgcat.parse(file).to_json
when "uglify", "u"
  file = ARGV[1]
  puts Tcl::Msgcat.parse(file).to_json(false)
when "render", "r"
  file = ARGV[1]
  puts Tcl::Msgcat.render(file).to_s
when "merge", "m"
  root = ARGV[1]
  files = ARGV[2..-1]
  Tcl::Msgcat.merge(root, files)
when "compile"
  source_path = ARGV[1]
  target_path = ARGV[2] || ARGV[1]

  Tcl::Msgcat.compile(source_path, target_path)
else
  puts <<-EOH
Usage: msgcat <action> <arguments>

Actions:
  p|parse <file>               Parse a msgcat file and output JSON
  u|uglify <file>              Parse a msgcat file and output ugly JSON
  r|render <file>              Parse a JSON file and output msgcat
  m|merge <root> <files>       Merge new keys from root into the files (glob pattern)
  c|compile <source> [target]  Compile from the source into the target

Examples:
  tcl-msgcat parse ROOT.msg > root.json
  tcl-msgcat uglify ROOT.msg > root.json
  tcl-msgcat render root.json > ROOT.msg
  tcl-msgcat merge root.json path/to/translations/*.json
  tcl-msgcat merge root.json zh_tw.json fr.json de.json
  tcl-msgcat compile path/to/my/json/files path/to/my/msgcat/files
  tcl-msgcat compile path/to/my/json/msgcat/files
  EOH
end